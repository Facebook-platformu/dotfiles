let g:cache_home = empty($XDG_CACHE_HOME) ? expand('$HOME/.cache') : $XDG_CACHE_HOME
let g:config_home = empty($XDG_CONFIG_HOME) ? expand('$HOME/.config') : $XDG_CONFIG_HOME

if &compatible
  set nocompatible
endif

augroup MyAutoCmd
  autocmd!
augroup END


" ================================================================
" View
" ================================================================

set guifont=Cica:h14

set list
set listchars=tab:»-,trail:_,eol:↲,extends:»,precedes:«,nbsp:･

set cmdheight=2
set nowrap
set linespace=5


" ================================================================
" Editor
" ================================================================

set fileencodings=utf-8,cp932,euc-jp,iso-2022-jp
set fenc=utf-8
set encoding=utf-8

set ignorecase
set smartcase
set incsearch
set hlsearch
nmap <Esc><Esc> :nohlsearch<CR><Esc>

set clipboard+=unnamed

let mapleader = "\<Space>"

set autoindent
set smartindent

set expandtab

set tabstop=2
set shiftwidth=2
set softtabstop=2

set shiftround

vnoremap < <gv
vnoremap > >gv

set noswapfile

set nofoldenable

set splitbelow
set splitright

set matchpairs+=<:>

set ambiwidth=double

cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'

set completeopt+=noinsert

if !exists('loaded_matchit')
  runtime macros/matchit.vim
endif

let g:markdown_fenced_languages = ['ruby', 'go', 'sql']

" ================================================================
" Tab
" ================================================================

set showtabline=2
nnoremap sn gt
nnoremap sp gT
nnoremap st :<C-u>tabnew<CR>
nnoremap sx :<C-u>tabclose<CR>


" ================================================================
" Terminal
" ================================================================

if has('nvim')
  tnoremap <silent> <C-Space> <C-\><C-n>
endif


" ================================================================
" Plugins
" ================================================================

call plug#begin('~/.vim/plugged')

Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim', { 'tag': '*' }
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/vim-lsp', { 'tag': '*' }
Plug 'mattn/vim-lsp-settings'
Plug 'mattn/vim-lsp-icons'

Plug 'cocopon/iceberg.vim'

Plug 'itchyny/lightline.vim'

Plug expand('$HOMEBREW_PREFIX/opt/fzf')
Plug 'junegunn/fzf.vim'

Plug 'preservim/nerdcommenter'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-surround'
Plug 'AndrewRadev/switch.vim'
Plug 'junegunn/rainbow_parentheses.vim'

if !has('nvim')
  Plug 'Shougo/vimshell.vim' " for vim/delve
endif

" integrations ----------------
Plug 'christoomey/vim-tmux-navigator'
Plug 'direnv/direnv.vim'

" filetypes ----------------
" Ruby
Plug 'tpope/vim-endwise', { 'for': 'ruby' }
Plug 'joker1007/vim-ruby-heredoc-syntax', { 'for': 'ruby' }

" Go
Plug 'mattn/vim-goimports', { 'for': 'go' }
Plug 'sebdah/vim-delve', { 'for': 'go' }

" Rust
Plug 'rust-lang/rust.vim', { 'for': 'rust' }

" TOML
Plug 'cespare/vim-toml', { 'for': 'toml' }

" Protocol Buffers
Plug expand('$HOMEBREW_PREFIX/opt/protobuf/share')

" GraphQL
Plug 'jparise/vim-graphql', { 'for': 'graphql' }

" tools ----------------
Plug 'glidenote/memolist.vim'

call plug#end()

let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
let g:rainbow#blacklist = [110, 140, 252, 242]

augroup MyAutoCmd
  autocmd VimEnter * RainbowParentheses
  autocmd VimEnter * nested colorscheme iceberg
  if !has("gui_running")
    autocmd Colorscheme * highlight Normal ctermbg=none
    autocmd Colorscheme * highlight NonText ctermbg=none
    autocmd Colorscheme * highlight LineNr ctermbg=none
    autocmd Colorscheme * highlight Folded ctermbg=none
    autocmd Colorscheme * highlight EndOfBuffer ctermbg=none
  endif
augroup END

call map(sort(split(globpath(g:vim_config_dir, 'plugins/*.vim'))), {->[execute('exec "so" v:val')]})

" ================================================================
" filetype
" ================================================================

autocmd BufNewFile,BufRead *.jbuilder set filetype=ruby
autocmd BufNewFile,BufRead Guardfile  set filetype=ruby
autocmd BufNewFile,BufRead .pryrc     set filetype=ruby
autocmd BufNewFile,BufRead *.js.flow  set filetype=javascript
autocmd BufNewFile,BufRead .babelrc   set filetype=json
