[[plugins]]
repo = 'Shougo/dein.vim'
# rev = '1.0'
rtp = ''

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
hook_add = '''
  nnoremap <silent> <C-w>h :TmuxNavigateLeft<cr>
  nnoremap <silent> <C-w>j :TmuxNavigateDown<cr>
  nnoremap <silent> <C-w>k :TmuxNavigateUp<cr>
  nnoremap <silent> <C-w>l :TmuxNavigateRight<cr>
  nnoremap <silent> <C-w>\\ :TmuxNavigatePrevious<cr>
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  execute 'source' g:dein_plugin_rc_dir . '/nerdcommenter.rc.vim'
  nmap <leader>/ <Plug>NERDCommenterToggle
  vmap <leader>/ <Plug>NERDCommenterToggle
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent> <leader>e :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  execute 'source' g:dein_plugin_rc_dir . '/airline.rc.vim'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
  let g:clever_f_smart_case = 1
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'

[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'

[[plugins]]
repo = 'haya14busa/incsearch-easymotion.vim'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_do_mapping = 0 "Disable default mappings
  let g:EasyMotion_smartcase = 1
  nmap s <Plug>(easymotion-s2)

  "  Overwin motions
  "---------------------------
  map  / <Plug>(easymotion-sn)
  omap / <Plug>(easymotion-tn)
  map  n <Plug>(easymotion-next)
  map  N <Plug>(easymotion-prev)

  "  Bonus fuzzy-search with EasyMotion
  "---------------------------
  function! s:config_easyfuzzymotion(...) abort
    return extend(copy({
    \   'converters': [incsearch#config#fuzzyword#converter()],
    \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
    \   'keymap': {"\<CR>": '<Over>(easymotion)'},
    \   'is_expr': 0,
    \   'is_stay': 1
    \ }), get(a:, 1, {}))
  endfunction

  noremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())

  "  n-character search motion
  "---------------------------
  " <Leader>f{char} to move to {char}
  map  <Leader>f <Plug>(easymotion-bd-f)
  nmap <Leader>f <Plug>(easymotion-overwin-f)

  " s{char}{char} to move to {char}{char}
  nmap s <Plug>(easymotion-overwin-f2)

  " Move to line
  map <Leader>L <Plug>(easymotion-bd-jk)
  nmap <Leader>L <Plug>(easymotion-overwin-line)

  " Move to word
  map  <Leader>w <Plug>(easymotion-bd-w)
  nmap <Leader>w <Plug>(easymotion-overwin-w)
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = '''
  nnoremap ! :Switch<CR>
'''

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'othree/html5.vim'
on_ft = 'html'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = 'css'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'
hook_add = '''
  let g:javascript_plugin_flow = 1
'''

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'
hook_add = '''
  let g:jsx_ext_required = 0
'''

[[plugins]]
repo = 'fleischie/vim-styled-components'
on_ft = 'javascript'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
  let g:go_highlight_operators = 1
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_fields = 0
  let g:go_highlight_types = 1
  let g:go_highlight_extra_types = 1
  let g:go_highlight_build_constraints = 1
  let g:go_highlight_generate_tags = 1
  let g:go_highlight_format_strings = 1
  let g:go_fmt_experimental = 1
  let g:go_fmt_command = "goimports"
  let g:go_test_timeout= '15s'
  " for LSP
  let g:go_fmt_autosave = 1
  let g:go_def_mapping_enabled = 0
  let g:go_doc_keywordprg_enabled = 0
'''

[[plugins]]
repo = 'sebdah/vim-delve'
on_ft = 'go'
hook_add = '''
  nnoremap <leader>b :<C-u>DlvToggleBreakpoint<CR>
  nnoremap <leader>d :<C-u>DlvDebug<CR>
'''

[[plugins]]
repo = 'Shougo/vimshell.vim' # for vim/delve
if = "!has('nvim')"

[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = 'ruby'
on_event = 'InsertEnter'

[[plugins]]
repo = 'chrisbra/vim-sh-indent'
on_ft = 'sh'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'direnv/direnv.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid' # supports terminal colors for VimR
hook_add = '''
  set t_Co=256
  let g:hybrid_custom_term_colors = 1
  let g:hybrid_reduced_contrast = 1
  set background=dark
  if (has("termguicolors"))
    set termguicolors
  endif

  au MyAutoCmd VimEnter * nested colorscheme hybrid
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
  set hidden

  let g:LanguageClient_serverCommands = {
      \ 'go': ['gopls', '-logfile=auto'],
      \ 'ruby': ['solargraph', 'stdio'],
      \ }

  autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()

  let g:LanguageClient_loadSettings = 1
  nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
  nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
  nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
'''
if = "has('nvim')"

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  execute 'source' g:dein_plugin_rc_dir . '/ale.rc.vim'
'''

[[plugins]]
repo = 'uber/prototool'
rtp = 'vim/prototool'
on_ft = 'proto'

[[plugins]]
repo = "diepm/vim-rest-console"
hook_add = '''
  let g:vrc_auto_format_response_enabled = 1
  let g:vrc_auto_format_response_patterns = {
  \ 'json': 'jq "."',
  \}
'''
